<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CryptoSpect.Service</name>
    </assembly>
    <members>
        <member name="T:CryptoSpect.Service.Implementations.CryptocurrencyService">
            <summary>
            Provides implementation for the ICryptocurrencyService interface.
            </summary>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.CryptocurrencyService.#ctor(CryptoSpect.Core.Interfaces.ICryptocurrencyRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoSpect.Service.Implementations.CryptocurrencyService"/> class.
            </summary>
            <param name="cryptocurrencyRepository">The cryptocurrency repository.</param>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.CryptocurrencyService.AddCryptocurrencyAsync(CryptoSpect.Core.Models.Cryptocurrency)">
            <summary>
            Asynchronously adds a new cryptocurrency.
            </summary>
            <param name="cryptocurrency">The cryptocurrency to add.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.CryptocurrencyService.DeleteCryptocurrencyAsync(System.String)">
            <summary>
            Asynchronously deletes a cryptocurrency by its identifier.
            </summary>
            <param name="id">The identifier of the cryptocurrency to delete.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.CryptocurrencyService.GetAllCryptocurrenciesAsync">
            <summary>
            Asynchronously retrieves all cryptocurrencies.
            </summary>
            <returns>A Task representing the asynchronous operation, containing an IEnumerable of Cryptocurrencies.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.CryptocurrencyService.GetCryptocurrencyByIdAsync(System.String)">
            <summary>
            Asynchronously retrieves a cryptocurrency by its identifier.
            </summary>
            <param name="id">The identifier of the cryptocurrency to retrieve.</param>
            <returns>A Task representing the asynchronous operation, containing the Cryptocurrency.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.CryptocurrencyService.UpdateCryptocurrencyAsync(CryptoSpect.Core.Models.Cryptocurrency)">
            <summary>
            Asynchronously updates a cryptocurrency.
            </summary>
            <param name="cryptocurrency">The cryptocurrency to update.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:CryptoSpect.Service.Implementations.TransactionHistoryService">
            <summary>
            Provides implementation for the ITransactionHistoryService interface.
            </summary>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.TransactionHistoryService.#ctor(CryptoSpect.Core.Interfaces.ITransactionHistoryRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoSpect.Service.Implementations.TransactionHistoryService"/> class.
            </summary>
            <param name="transactionHistoryRepository">The transaction history repository.</param>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.TransactionHistoryService.AddTransactionAsync(CryptoSpect.Core.Models.TransactionHistory)">
            <summary>
            Asynchronously adds a new transaction history.
            </summary>
            <param name="transactionHistory">The transaction history to add.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.TransactionHistoryService.DeleteTransactionAsync(System.Guid)">
            <summary>
            Asynchronously deletes a transaction history by its identifier.
            </summary>
            <param name="id">The identifier of the transaction history to delete.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.TransactionHistoryService.GetAllTransactionsAsync">
            <summary>
            Asynchronously retrieves all transaction histories.
            </summary>
            <returns>A Task representing the asynchronous operation, containing an IEnumerable of TransactionHistories.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.TransactionHistoryService.GetTransactionHistoryByIdAsync(System.Guid)">
            <summary>
            Asynchronously retrieves a transaction history by its identifier.
            </summary>
            <param name="id">The identifier of the transaction history to retrieve.</param>
            <returns>A Task representing the asynchronous operation, containing the TransactionHistory.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.TransactionHistoryService.UpdateTransactionAsync(CryptoSpect.Core.Models.TransactionHistory)">
            <summary>
            Asynchronously updates a transaction history.
            </summary>
            <param name="transactionHistory">The transaction history to update.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:CryptoSpect.Service.Implementations.UserService">
            <summary>
            Provides implementation for the IUserService interface.
            </summary>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.UserService.#ctor(CryptoSpect.Core.Interfaces.IUserRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:CryptoSpect.Service.Implementations.UserService"/> class.
            </summary>
            <param name="userRepository">The user repository.</param>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.UserService.AddUserAsync(CryptoSpect.Core.Models.User)">
            <summary>
            Asynchronously adds a new user.
            </summary>
            <param name="user">The user to add.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.UserService.DeleteUserAsync(System.Guid)">
            <summary>
            Asynchronously deletes a user by their identifier.
            </summary>
            <param name="id">The identifier of the user to delete.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.UserService.GetAllUsersAsync">
            <summary>
            Asynchronously retrieves all users.
            </summary>
            <returns>A Task representing the asynchronous operation, containing an IEnumerable of Users.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.UserService.GetUserByIdAsync(System.Guid)">
            <summary>
            Asynchronously retrieves a user by their identifier.
            </summary>
            <param name="id">The identifier of the user to retrieve.</param>
            <returns>A Task representing the asynchronous operation, containing the User.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Implementations.UserService.UpdateUserAsync(CryptoSpect.Core.Models.User)">
            <summary>
            Asynchronously updates a user.
            </summary>
            <param name="user">The user to update.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:CryptoSpect.Service.Interfaces.ICryptocurrencyService">
            <summary>
            Defines the contract for cryptocurrency-related services.
            </summary>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ICryptocurrencyService.GetCryptocurrencyByIdAsync(System.String)">
            <summary>
            Asynchronously retrieves a cryptocurrency by its identifier.
            </summary>
            <param name="id">The unique identifier for the cryptocurrency.</param>
            <returns>A Task representing the asynchronous operation, containing the Cryptocurrency.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ICryptocurrencyService.GetAllCryptocurrenciesAsync">
            <summary>
            Asynchronously retrieves all cryptocurrencies.
            </summary>
            <returns>A Task representing the asynchronous operation, containing an IEnumerable of Cryptocurrencies.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ICryptocurrencyService.AddCryptocurrencyAsync(CryptoSpect.Core.Models.Cryptocurrency)">
            <summary>
            Asynchronously adds a new cryptocurrency.
            </summary>
            <param name="cryptocurrency">The cryptocurrency to add.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ICryptocurrencyService.UpdateCryptocurrencyAsync(CryptoSpect.Core.Models.Cryptocurrency)">
            <summary>
            Asynchronously updates an existing cryptocurrency.
            </summary>
            <param name="cryptocurrency">The cryptocurrency to update.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ICryptocurrencyService.DeleteCryptocurrencyAsync(System.String)">
            <summary>
            Asynchronously deletes a cryptocurrency by its identifier.
            </summary>
            <param name="id">The unique identifier for the cryptocurrency to delete.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:CryptoSpect.Service.Interfaces.ITransactionHistoryService">
            <summary>
            Defines the contract for transaction history-related services.
            </summary>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ITransactionHistoryService.GetTransactionHistoryByIdAsync(System.Guid)">
            <summary>
            Asynchronously retrieves a transaction history by its identifier.
            </summary>
            <param name="id">The unique identifier for the transaction history.</param>
            <returns>A Task representing the asynchronous operation, containing the TransactionHistory.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ITransactionHistoryService.GetAllTransactionsAsync">
            <summary>
            Asynchronously retrieves all transaction histories.
            </summary>
            <returns>A Task representing the asynchronous operation, containing an IEnumerable of TransactionHistories.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ITransactionHistoryService.AddTransactionAsync(CryptoSpect.Core.Models.TransactionHistory)">
            <summary>
            Asynchronously adds a new transaction history.
            </summary>
            <param name="transactionHistory">The transaction history to add.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ITransactionHistoryService.UpdateTransactionAsync(CryptoSpect.Core.Models.TransactionHistory)">
            <summary>
            Asynchronously updates an existing transaction history.
            </summary>
            <param name="transactionHistory">The transaction history to update.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.ITransactionHistoryService.DeleteTransactionAsync(System.Guid)">
            <summary>
            Asynchronously deletes a transaction history by its identifier.
            </summary>
            <param name="id">The unique identifier for the transaction history to delete.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:CryptoSpect.Service.Interfaces.IUserService">
            <summary>
            Defines the contract for user-related services.
            </summary>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.IUserService.GetUserByIdAsync(System.Guid)">
            <summary>
            Asynchronously retrieves a user by their identifier.
            </summary>
            <param name="id">The unique identifier for the user.</param>
            <returns>A Task representing the asynchronous operation, containing the User.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.IUserService.GetAllUsersAsync">
            <summary>
            Asynchronously retrieves all users.
            </summary>
            <returns>A Task representing the asynchronous operation, containing an IEnumerable of Users.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.IUserService.AddUserAsync(CryptoSpect.Core.Models.User)">
            <summary>
            Asynchronously adds a new user.
            </summary>
            <param name="user">The user to add.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.IUserService.UpdateUserAsync(CryptoSpect.Core.Models.User)">
            <summary>
            Asynchronously updates an existing user.
            </summary>
            <param name="user">The user to update.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CryptoSpect.Service.Interfaces.IUserService.DeleteUserAsync(System.Guid)">
            <summary>
            Asynchronously deletes a user by their identifier.
            </summary>
            <param name="id">The unique identifier for the user to delete.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
    </members>
</doc>
